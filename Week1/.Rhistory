predict(lm(y2 ~ x2))
# b kohta mse vektoreihin saat laskettua
# mse numeric, saat taulukon jota voi käsitellä kuten javassa mse vector [i][j]
x2 <- runif(1000, min = -3, max = 3)
e2 = rnorm(1000, mean = 0, sd = 0.4)
y2 = 2+x2−0.5*x2^2 + e2
df2 <- data.frame("x" = x2, "y" = y2)
plot(df2)
model5 <- lm(y~poly(x2,4), data=df2)
predict(lm(y2 ~ x2))
mse(model5)
# b kohta mse vektoreihin saat laskettua
# mse numeric, saat taulukon jota voi käsitellä kuten javassa mse vector [i][j]
x2 <- runif(1000, min = -3, max = 3)
e2 = rnorm(1000, mean = 0, sd = 0.4)
y2 = 2+x2−0.5*x2^2 + e2
df2 <- data.frame("x" = x2, "y" = y2)
plot(df2)
model5 <- lm(y~poly(x2,4), data=df2)
predict(lm(y2 ~ x2))
mse(model5)
grid2 <- data.frame(x=seq(-3,3, by=.01))
plot(df2)
lines(grid$x, predict(model5, newdata=grid), col="red")
# b kohta mse vektoreihin saat laskettua
# mse numeric, saat taulukon jota voi käsitellä kuten javassa mse vector [i][j]
x2 <- runif(1000, min = -3, max = 3)
e2 = rnorm(1000, mean = 0, sd = 0.4)
y2 = 2+x2−0.5*x2^2 + e2
df2 <- data.frame("x" = x2, "y" = y2)
plot(df2)
model5 <- lm(y~poly(x2,4), data=df2)
predict(lm(y2 ~ x2))
mse(model5)
grid2 <- data.frame(x=seq(-3,3, by=.01))
plot(df2, df)
lines(grid$x, predict(model5, newdata=grid), col="red")
n <- 10
nr <- nrow(df)
split(df, rep(1:ceiling(nr/n), each=n, length.out=nr))
n <- 3
nr <- nrow(df)
split(df, rep(1:ceiling(nr/n), each=n, length.out=nr))
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
lines(grid$x, predict(model1, newdata=grid), col="red")
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
lines(grid$x, predict(model1, newdata=grid), col="blue")
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
lines(grid$x, predict(model1, newdata=grid), col="blue")
lines(grid$x, predict(model2, newdata=grid), col="green")
lines(grid$x, predict(model3, newdata=grid), col="yellow")
# b kohta mse vektoreihin saat laskettua
# mse numeric, saat taulukon jota voi käsitellä kuten javassa mse vector [i][j]
x2 <- runif(1000, min = -3, max = 3)
e2 = rnorm(1000, mean = 0, sd = 0.4)
y2 = 2+x2−0.5*x2^2 + e2
df2 <- data.frame("x" = x2, "y" = y2)
plot(df2)
model5 <- lm(y~poly(x2,4), data=df2)
predict(lm(y2 ~ x2))
pred.w.plim <- predict(lm(y2 ~ x2), new, interval = "prediction")
# b kohta mse vektoreihin saat laskettua
# mse numeric, saat taulukon jota voi käsitellä kuten javassa mse vector [i][j]
x2 <- runif(1000, min = -3, max = 3)
e2 = rnorm(1000, mean = 0, sd = 0.4)
y2 = 2+x2−0.5*x2^2 + e2
df2 <- data.frame("x" = x2, "y" = y2)
plot(df2)
model5 <- lm(y~poly(x2,4), data=df2)
predict(lm(y2 ~ x2))
predict(model4, model5)
# b kohta mse vektoreihin saat laskettua
# mse numeric, saat taulukon jota voi käsitellä kuten javassa mse vector [i][j]
x2 <- runif(1000, min = -3, max = 3)
e2 = rnorm(1000, mean = 0, sd = 0.4)
y2 = 2+x2−0.5*x2^2 + e2
df2 <- data.frame("x" = x2, "y" = y2)
plot(df2)
model5 <- lm(y~poly(x2,4), data=df2)
predict(lm(y2 ~ x2))
predict(model4, newdata = model5)
# https://www.wolframalpha.com/input/?i=%5C%5BSqrt%5D%28-ln%280.05%2F2%29%2F2%2F10%29
p1 = 0.5
p2 = 0.9
p3 = 0.99
n1 = 10
n2 = 100
n3 = 1000
n1p1 = rbinom(10000, n1, p1)
n1p2 = rbinom(10000, n1, p2)
n1p3 = rbinom(10000, n1, p3)
n2p1 = rbinom(10000, n2, p1)
n2p2 = rbinom(10000, n2, p2)
n2p3 = rbinom(10000, n2, p3)
n3p1 = rbinom(10000, n3, p1)
n3p2 = rbinom(10000, n3, p2)
n3p3 = rbinom(10000, n3, p3)
count = 0
for (x in n1p3) {
if (x>0.70531 & x<9.29469) {
count = count+1
}
}
print(count)
count = 0
for (x in n2p1) {
if (x>3.641898 & x<63.58102) {
count = count+1
}
}
print(count)
count = 0
for (x in n3p3) {
if (x>542.9469 & x<85.8938) {
count = count+1
}
}
print(count)
count = 0
for (x in n1p3) {
if (x>0.70531 & x<9.29469) {
count = count+1
}
}
print(count/10000)
count = 0
for (x in n2p1) {
if (x>3.641898 & x<63.58102) {
count = count+1
}
}
print(count/10000)
count = 0
for (x in n3p3) {
if (x>542.9469 & x<85.8938) {
count = count+1
}
}
print(count/10000)
summary(college) # i)
pairs(college) # ii)
boxplot(college$Outstate~college$Private) # iii)
Elite=rep("No",nrow(college )) # iv
Elite[college$Top10perc >50]=" Yes"
Elite=as.factor(Elite)
college=data.frame(college , Elite)
summary(Elite)
plot(Elite, college$Outstate)
plot(Elite~college$Outstate)
rm(list = ls())
college = read.csv("College.csv", header = TRUE)
fix(college)
#rownames (college )=college [,1]
#fix(college)
college =college [,-1]
fix(college)
summary(college) # i)
pairs(college) # ii)
boxplot(college$Outstate~college$Private) # iii)
Elite=rep("No",nrow(college )) # iv
Elite[college$Top10perc >50]=" Yes"
Elite=as.factor(Elite)
college=data.frame(college , Elite)
summary(Elite)
plot(Elite, college$Outstate)
plot(Elite~college$Outstate)
par(mfrow=c(2,2)) # v
hist(college$PhD)
hist(college$Grad.Rate)
hist(college$Enroll)
hist(college$Accept)
# vi
kollege=college [,3]
summary(kollege)
kollege=college [,3,4]
summary(kollege)
rm(list = ls())
college = read.csv("College.csv", header = TRUE)
fix(college)
#rownames (college )=college [,1]
#fix(college)
college =college [,-1]
fix(college)
summary(college) # i)
pairs(college) # ii)
boxplot(college$Outstate~college$Private) # iii)
Elite=rep("No",nrow(college )) # iv
Elite[college$Top10perc >50]=" Yes"
Elite=as.factor(Elite)
college=data.frame(college , Elite)
summary(Elite)
plot(Elite, college$Outstate)
boxplot(Elite~college$Outstate)
Elite=rep("No",nrow(college )) # iv
Elite[college$Top10perc >50]=" Yes"
Elite=as.factor(Elite)
college=data.frame(college , Elite)
summary(Elite)
#plot(Elite, college$Outstate)
boxplot(Elite~college$Outstate)
Elite=rep("No",nrow(college )) # iv
Elite[college$Top10perc >50]=" Yes"
Elite=as.factor(Elite)
college=data.frame(college , Elite)
summary(Elite)
#plot(Elite, college$Outstate)
boxplot(college$Elite~college$Outstate)
Elite=rep("No",nrow(college )) # iv
Elite[college$Top10perc >50]=" Yes"
Elite=as.factor(Elite)
college=data.frame(college , Elite)
summary(Elite)
plot(Elite, college$Outstate)
boxplot(Elite~college$Outstate)
Elite=rep("No",nrow(college )) # iv
Elite[college$Top10perc >50]=" Yes"
Elite=as.factor(Elite)
college=data.frame(college , Elite)
summary(Elite)
plot(Elite, college$Outstate)
#boxplot(Elite~college$Outstate)
par(mfrow=c(2,2)) # v
hist(college$PhD, col = 'blue')
hist(college$Grad.Rate)
hist(college$Enroll)
hist(college$Accept)
par(mfrow=c(2,2)) # v
hist(college$PhD, col = 'blue', breaks = 10)
hist(college$Grad.Rate)
hist(college$Enroll)
hist(college$Accept)
par(mfrow=c(2,2)) # v
hist(college$PhD, col = 'blue', breaks = 10)
hist(college$Grad.Rate, col = 'green')
hist(college$Enroll, col = 'red')
hist(college$Accept, col = 'purple')
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model0 <- lm(y~poly(x,0), data=df)
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
lines(grid$x, predict(model1, newdata=grid), col="blue")
lines(grid$x, predict(model2, newdata=grid), col="green")
lines(grid$x, predict(model3, newdata=grid), col="yellow")
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
lines(grid$x, predict(model1, newdata=grid), col="blue")
lines(grid$x, predict(model2, newdata=grid), col="green")
lines(grid$x, predict(model3, newdata=grid), col="yellow")
grid2 <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid2$x, predict(model3, newdata=grid), col="yellow")
lines(grid2$x, predict(model3, newdata=grid), col="purple")
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
model5 <- lm(y~poly(x,5), data=df)
model6 <- lm(y~poly(x,6), data=df)
model7 <- lm(y~poly(x,7), data=df)
model8 <- lm(y~poly(x,8), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
mse(model5)
mse(model6)
mse(model7)
mse(model8)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
lines(grid$x, predict(model1, newdata=grid), col="blue")
lines(grid$x, predict(model2, newdata=grid), col="green")
lines(grid$x, predict(model3, newdata=grid), col="yellow")
grid2 <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid2$x, predict(model5, newdata=grid), col="purple")
lines(grid2$x, predict(model6, newdata=grid), col="red")
lines(grid2$x, predict(model7, newdata=grid), col="blue")
lines(grid2$x, predict(model8, newdata=grid), col="green")
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
model5 <- lm(y~poly(x,5), data=df)
model6 <- lm(y~poly(x,6), data=df)
model7 <- lm(y~poly(x,7), data=df)
model8 <- lm(y~poly(x,8), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
mse(model5)
mse(model6)
mse(model7)
mse(model8)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
lines(grid$x, predict(model1, newdata=grid), col="blue")
lines(grid$x, predict(model2, newdata=grid), col="green")
lines(grid$x, predict(model3, newdata=grid), col="yellow")
grid2 <- data.frame(x=seq(-10,3, by=.01))
plot(df)
lines(grid2$x, predict(model5, newdata=grid), col="purple")
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
model5 <- lm(y~poly(x,5), data=df)
model6 <- lm(y~poly(x,6), data=df)
model7 <- lm(y~poly(x,7), data=df)
model8 <- lm(y~poly(x,8), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
mse(model5)
mse(model6)
mse(model7)
mse(model8)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
lines(grid$x, predict(model1, newdata=grid), col="blue")
lines(grid$x, predict(model2, newdata=grid), col="green")
lines(grid$x, predict(model3, newdata=grid), col="yellow")
grid2 <- data.frame(x=seq(-10,10, by=.01))
plot(df)
lines(grid2$x, predict(model5, newdata=grid), col="purple")
x <- runif(30, min = -3, max = 3)
e = rnorm(30, mean = 0, sd = 0.4)
y = 2+x−0.5*x^2 + e
df <- data.frame("x" = x, "y" = y)
plot(df)
model1 <- lm(y~poly(x,1), data=df)
model2 <- lm(y~poly(x,2), data=df)
model3 <- lm(y~poly(x,3), data=df)
model4 <- lm(y~poly(x,4), data=df)
model5 <- lm(y~poly(x,5), data=df)
model6 <- lm(y~poly(x,6), data=df)
model7 <- lm(y~poly(x,7), data=df)
model8 <- lm(y~poly(x,8), data=df)
print(model4)
# summary(model4)
mse <- function(model)
mean(model$residuals^2)
mse(model1)
mse(model2)
mse(model3)
mse(model4)
mse(model5)
mse(model6)
mse(model7)
mse(model8)
plot(df)
grid <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid$x, predict(model4, newdata=grid), col="red")
lines(grid$x, predict(model1, newdata=grid), col="blue")
lines(grid$x, predict(model2, newdata=grid), col="green")
lines(grid$x, predict(model3, newdata=grid), col="yellow")
grid2 <- data.frame(x=seq(-3,3, by=.01))
plot(df)
lines(grid2$x, predict(model5, newdata=grid), col="purple")
lines(grid2$x, predict(model6, newdata=grid), col="red")
lines(grid2$x, predict(model7, newdata=grid), col="blue")
lines(grid2$x, predict(model8, newdata=grid), col="green")
